import pdfplumber
import re
from collections import Counter


def is_page_number(content):
    """Check if content matches common page number patterns."""
    patterns = [r"^\d+$", r"^Page \d+$", r"^Page \d+ of \d+$", r"^Pg\.? \d+$", r"^\d+ of \d+$"]
    return any(re.match(pattern, content, re.IGNORECASE) for pattern in patterns)


def detect_consistent_text(text_list):
    """Find the most frequently occurring text."""
    if not text_list:
        return ""
    freq_counter = Counter(text_list)
    most_common_text, occurrence = freq_counter.most_common(1)[0]
    return most_common_text


def detect_header_footer(pdf_path, header_height=50, footer_height=50):
    header_texts, footer_texts = [], []
    header_positions, footer_positions = []

    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            words = page.extract_words()
            page_height = page.height

            header_lines = {}
            footer_lines = {}

            for word in words:
                if word["top"] <= header_height:
                    header_lines.setdefault(word["top"], []).append(word["text"])
                if word["top"] >= (page_height - footer_height):
                    footer_lines.setdefault(word["top"], []).append(word["text"])

            header_content = [" ".join(header_lines[key]) for key in sorted(header_lines.keys())]
            footer_content = [" ".join(footer_lines[key]) for key in sorted(footer_lines.keys())]

            header_text = " | ".join(header_content).strip() if header_content else ""
            footer_text = " | ".join(footer_content).strip() if footer_content else ""

            header_bottom = max(header_lines.keys(), default=None)
            footer_top = min(footer_lines.keys(), default=None)

            if is_page_number(footer_text):
                footer_text = ""

            if header_text:
                header_texts.append(header_text)
                header_positions.append((header_text, header_bottom))

            if footer_text:
                footer_texts.append(footer_text)
                footer_positions.append((footer_text, footer_top))

    consistent_header = detect_consistent_text(header_texts)
    consistent_footer = detect_consistent_text(footer_texts)

    def get_consistent_position(position_list, consistent_text, find_max=True):
        relevant_positions = [pos for text, pos in position_list if text == consistent_text]
        return max(relevant_positions) if find_max and relevant_positions else (
            min(relevant_positions) if relevant_positions else None
        )

    consistent_header_bottom = get_consistent_position(header_positions, consistent_header, find_max=True)
    consistent_footer_top = get_consistent_position(footer_positions, consistent_footer, find_max=False)

    def calculate_confidence(position_list, consistent_text, limit_position, compare_above=True):
        """Calculate confidence using only detected header/footer text in its actual region."""
        if not consistent_text or limit_position is None:
            return 0.0

        matching_count = 0
        total_count = 0

        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                words = page.extract_words()
                extracted_text = []

                for word in words:
                    if compare_above and word["top"] <= limit_position:
                        extracted_text.append(word["text"])
                    elif not compare_above and word["top"] >= limit_position:
                        extracted_text.append(word["text"])

                extracted_text = " ".join(extracted_text).strip()
                total_count += 1
                if extracted_text == consistent_text:
                    matching_count += 1

        return round((matching_count / total_count) * 100, 2) if total_count > 0 else 0.0

    header_confidence = calculate_confidence(header_positions, consistent_header, consistent_header_bottom, compare_above=True)
    footer_confidence = calculate_confidence(footer_positions, consistent_footer, consistent_footer_top, compare_above=False)

    return {
        "consistent_header": consistent_header,
        "header_confidence": header_confidence,
        "consistent_header_bottom": consistent_header_bottom,
        "consistent_footer": consistent_footer,
        "footer_confidence": footer_confidence,
        "consistent_footer_top": consistent_footer_top,
    }


# Example Usage
pdf_path = "sample.pdf"
header_footer_data = detect_header_footer(pdf_path)
print(header_footer_data)
