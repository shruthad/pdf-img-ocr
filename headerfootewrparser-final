import pdfplumber
import json
from collections import defaultdict

# Class to handle PDF Parsing
class PDFParser:
    def __init__(self, pdf_path, config_path):
        self.pdf_path = pdf_path
        self.config = self.load_config(config_path)
        self.doc_name = pdf_path.split('/')[-1]
        self.title = ""
        self.result = []
        self.current_section_pages = set()
        self.current_subsection_pages = set()
        self.header_bottom = self.config.get("header", {}).get("bottom", None)
        self.footer_top = self.config.get("footer", {}).get("top", None)

    def load_config(self, config_path):
        with open(config_path, 'r') as f:
            return json.load(f)

    def parse(self):
        current_section = None
        current_subsection = None
        content, tables = [], []

        with pdfplumber.open(self.pdf_path) as pdf:
            for page_number, page in enumerate(pdf.pages, start=1):
                current_section, current_subsection, content, tables = self.process_page(
                    page, current_section, current_subsection, content, tables, page_number
                )

        # Final append of the last section or subsection
        if current_section or current_subsection or content or tables:
            self.result.append({
                "Document Name": self.doc_name,
                "Title": self.title,
                "Sections Heading": current_section or "",
                "Subsections Heading": current_subsection or "",
                "Raw Content": " ".join(content),
                "Page Numbers": sorted(list(self.current_section_pages if not current_subsection else self.current_subsection_pages)),
                "Tables": tables,
                "Images": []
            })

        return self.result

    def group_lines_by_top(self, page):
        lines = defaultdict(list)
        for char in page.chars:
            lines[round(char['top'])].append(char)

        grouped_lines = {}
        for top, chars in sorted(lines.items()):
            # Sort characters by their x0 coordinate (horizontal position)
            chars = sorted(chars, key=lambda x: x['x0'])
            line_content = []

            for i, char in enumerate(chars):
                line_content.append(char['text'])

                # Add space if the next character is not immediately adjacent
                if i < len(chars) - 1:
                    next_char = chars[i + 1]
                    if next_char['x0'] > char['x1'] + 1:  # Adjust threshold as needed
                        line_content.append(' ')

            line_content = ''.join(line_content).strip()
            if line_content:
                grouped_lines[line_content] = chars

        return grouped_lines

    def match_heading(self, font_size, font_style):
        if self.match_config(self.config["title"], font_style, font_size):
            return "title"
        elif self.match_config(self.config["section"], font_style, font_size):
            return "section"
        elif self.match_config(self.config["subsection"], font_style, font_size):
            return "subsection"
        return None

    def match_config(self, config_entry, font_name, font_size):
        return (
            (config_entry["font_style"] == font_name or config_entry["font_style"].lower() == "nil") and
            (config_entry["font_size"] == font_size or config_entry["font_size"] == 0)
        )

    def process_page(self, page, current_section, current_subsection, content, tables, page_number):
        lines = self.group_lines_by_top(page)

        # Extract tables with positional details
        page_tables = []
        for table in page.find_tables():
            table_bbox = table.bbox
            table_data = {
                "data": table.extract(),
                "top": table_bbox[1],
                "bottom": table_bbox[3]
            }
            page_tables.append(table_data)

        # Skip lines in the header/footer region
        filtered_lines = {
            line_content: chars
            for line_content, chars in lines.items()
            if not (
                self.header_bottom and sum(char['top'] for char in chars) / len(chars) <= self.header_bottom or
                self.footer_top and sum(char['top'] for char in chars) / len(chars) >= self.footer_top
            )
        }

        for line_content, chars in filtered_lines.items():
            avg_font_size = round(sum(char['size'] for char in chars) / len(chars))
            font_styles = {char['fontname'] for char in chars}
            font_style = next(iter(font_styles), None)

            heading_type = self.match_heading(avg_font_size, font_style)

            if heading_type == "title":
                self.title += " " + line_content if self.title else line_content
            elif heading_type == "section":
                if current_section or content or tables:
                    self.result.append({
                        "Document Name": self.doc_name,
                        "Title": self.title,
                        "Sections Heading": current_section or "",
                        "Subsections Heading": current_subsection or "",
                        "Raw Content": " ".join(content),
                        "Page Numbers": sorted(list(self.current_section_pages if not current_subsection else self.current_subsection_pages)),
                        "Tables": tables,
                        "Images": []
                    })
                current_section = line_content
                current_subsection = None
                content, tables = [], []
                self.current_section_pages = {page_number}
                self.current_subsection_pages = set()
            elif heading_type == "subsection":
                if current_subsection or content or tables:
                    self.result.append({
                        "Document Name": self.doc_name,
                        "Title": self.title,
                        "Sections Heading": current_section,
                        "Subsections Heading": current_subsection or "",
                        "Raw Content": " ".join(content),
                        "Page Numbers": sorted(list(self.current_subsection_pages)),
                        "Tables": tables,
                        "Images": []
                    })
                current_subsection = line_content
                content, tables = [], []
                self.current_subsection_pages = {page_number}
            else:
                content.append(line_content)

        return current_section, current_subsection, content, tables


# Paths to PDF and config
pdf_path = "/content/2212.14052v3.pdf"
config_path = "/content/config.json"

# Initialize and run the parser
parser = PDFParser(pdf_path, config_path)
parsed_data = parser.parse()

# Save the result to JSON
output_path = "/content/output.json"
with open(output_path, 'w') as f:
    json.dump(parsed_data, f, indent=4)

print(f"Parsed data saved to {output_path}")





